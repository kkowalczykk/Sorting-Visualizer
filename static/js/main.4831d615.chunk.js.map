{"version":3,"sources":["Visualiser.js","sortingAlgorithms.js","App.js","serviceWorker.js","index.js"],"names":["getRandomNumber","min","max","Math","ceil","floor","random","Visualiser","state","numbers","size","speed","status","this","generateNumbers","i","push","setState","event","target","value","blockedElements","document","getElementsByClassName","numberBars","stopButton","getElementById","killId","setTimeout","clearInterval","length","style","backgroundColor","disabled","visibility","animations","array","change","temp","pop","bubbleSort","bubbleSortAnimate","firstBarID","secBarID","action","height1","height2","firstBarStyle","secBarStyle","color","height","minIndex","j","selectionSort","selectionSortAnimate","className","onClick","visualizeBubbleSort","visualizeSelectionSort","type","step","onChange","e","handleChangeSize","handleChangeSpeed","id","stopSorting","map","val","key","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4831d615.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Visualiser.css';\r\nimport { bubbleSortAnimate, selectionSortAnimate } from './sortingAlgorithms.js'\r\n\r\nconst PRIMARY_COLOR = '#5b62c0';\r\n\r\nclass Visualiser extends Component {\r\n      state = {\r\n            numbers: [],\r\n            size: '25',\r\n            speed: '30',\r\n            status: false,\r\n      }\r\n\r\n\r\n      componentDidMount() {\r\n            this.generateNumbers();\r\n      }\r\n\r\n\r\n      generateNumbers() {\r\n            const numbers = [];\r\n            for (let i = 0; i < this.state.size; i++) {\r\n                  numbers.push(getRandomNumber(20, 700)); // From 20 beacuse these numbers defines height of bars (bar with height less that 20px is barely visible)\r\n            }\r\n            this.setState({\r\n                  numbers: numbers,\r\n            });\r\n      }\r\n\r\n      handleChangeSize(event) {\r\n            this.setState({\r\n                  size: event.target.value,\r\n            })\r\n            this.generateNumbers();\r\n      }\r\n\r\n      handleChangeSpeed(event) {\r\n            this.setState({\r\n                  speed: event.target.value,\r\n            })\r\n      }\r\n\r\n      stopSorting(generateNumbers) {\r\n            let blockedElements = document.getElementsByClassName('blocked');\r\n            let numberBars = document.getElementsByClassName('number-bar');\r\n            let stopButton = document.getElementById('stop');\r\n            let killId = setTimeout(function () {\r\n                  for (var i = killId; i > 0; i--) clearInterval(i);\r\n                  for (let i = 0; i < numberBars.length; i++) {\r\n                        numberBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n                  }\r\n            }, 10);\r\n            this.generateNumbers();\r\n            for (let i = 0; i < blockedElements.length; i++) {\r\n                  blockedElements[i].disabled = !blockedElements[i].disabled;\r\n            }\r\n            stopButton.style.visibility = 'hidden';\r\n      }\r\n\r\n      visualizeBubbleSort() {\r\n            const animations = bubbleSortAnimate(this.state.numbers);\r\n            let blockedElements = document.getElementsByClassName('blocked');\r\n            let stopButton = document.getElementById('stop');\r\n            for (let i = 0; i < blockedElements.length; i++) {\r\n                  blockedElements[i].disabled = !blockedElements[i].disabled;\r\n            }\r\n            stopButton.style.visibility = 'visible';\r\n            for (let i = 0; i < animations.length; i++) {\r\n                  let numberBars = document.getElementsByClassName('number-bar');\r\n                  const [firstBarID, secBarID, action, height1, height2] = animations[i];\r\n                  let firstBarStyle = numberBars[firstBarID].style;\r\n                  let secBarStyle = numberBars[secBarID].style;\r\n                  let color;\r\n\r\n                  if (action === 1) {\r\n                        color = '#FF6347';\r\n                        setTimeout(() => {\r\n                              firstBarStyle.backgroundColor = color;\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 2) {\r\n                        setTimeout(() => {\r\n                              firstBarStyle.height = `${height2}px`;\r\n                              secBarStyle.height = `${height1}px`;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 3) {\r\n                        color = '#00FF00';\r\n                        setTimeout(() => {\r\n                              firstBarStyle.backgroundColor = color;\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === null) {\r\n                        color = PRIMARY_COLOR;\r\n                        setTimeout(() => {\r\n                              firstBarStyle.backgroundColor = color;\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 4) {\r\n                        setTimeout(() => {\r\n                              for (let i = 0; i < blockedElements.length; i++) {\r\n                                    blockedElements[i].disabled = !blockedElements[i].disabled;\r\n                                    stopButton.style.visibility = 'hidden';\r\n                              }\r\n                        }, i * this.state.speed);\r\n                  }\r\n            }\r\n\r\n      }\r\n\r\n      visualizeSelectionSort() {\r\n            const animations = selectionSortAnimate(this.state.numbers);\r\n            let blockedElements = document.getElementsByClassName('blocked');\r\n            let stopButton = document.getElementById('stop');\r\n            for (let i = 0; i < blockedElements.length; i++) {\r\n                  blockedElements[i].disabled = !blockedElements[i].disabled;\r\n            }\r\n            stopButton.style.visibility = 'visible';\r\n            for (let i = 0; i < animations.length; i++) {\r\n                  let numberBars = document.getElementsByClassName('number-bar');\r\n                  const [firstBarID, secBarID, action, height1, height2] = animations[i];\r\n                  let firstBarStyle = numberBars[firstBarID].style;\r\n                  let secBarStyle = numberBars[secBarID].style;\r\n                  let color;\r\n                  if (action === 0) {\r\n                        color = '#00FF00';\r\n                        setTimeout(() => {\r\n                              firstBarStyle.backgroundColor = color;\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 1) {\r\n                        color = '#FF6347';\r\n                        setTimeout(() => {\r\n                              firstBarStyle.backgroundColor = PRIMARY_COLOR;\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 2) {\r\n                        color = PRIMARY_COLOR;\r\n                        setTimeout(() => {\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 3) {\r\n                        color = PRIMARY_COLOR;\r\n                        setTimeout(() => {\r\n                              firstBarStyle.height = `${height2}px`;\r\n                              secBarStyle.height = `${height1}px`;\r\n                              firstBarStyle.backgroundColor = color;\r\n                              secBarStyle.backgroundColor = color;\r\n                        }, i * this.state.speed);\r\n                  }\r\n                  if (action === 4) {\r\n                        setTimeout(() => {\r\n                              for (let i = 0; i < blockedElements.length; i++) {\r\n                                    blockedElements[i].disabled = !blockedElements[i].disabled;\r\n                                    stopButton.style.visibility = 'hidden';\r\n                              }\r\n                        }, i * this.state.speed);\r\n                  }\r\n            }\r\n      }\r\n\r\n      render() {\r\n            const { numbers } = this.state;\r\n\r\n            return (\r\n                  <div className=\"visualiser-container\">\r\n                        <div className=\"toolbar\">\r\n                              <button className='button generate blocked' onClick={() => this.generateNumbers()}>Generate Numbers</button>\r\n                              <button className='button blocked' onClick={() => this.visualizeBubbleSort()}>Bubble sort</button>\r\n                              <button className='button blocked' onClick={() => this.visualizeSelectionSort()}>Selection sort</button>\r\n                              <label>\r\n                                    Number of elements to sort:\r\n                              <input className='input-range blocked' type=\"range\" value={this.state.size} min='5' max='100' step='5' onChange={(e) => this.handleChangeSize(e)} disabled={this.state.status} />\r\n                              </label>\r\n                              <label>\r\n                                    Delay between iterations:\r\n                              <input className='input-range blocked' type=\"range\" value={this.state.speed} min='5' max='300' step='5' onChange={(e) => this.handleChangeSpeed(e)} disabled={this.state.status} />\r\n                                    {this.state.speed} ms\r\n                        </label>\r\n                              <button className='button stop' id='stop' onClick={() => this.stopSorting()} >Stop</button>\r\n                        </div>\r\n                        <div className=\"bars-container\">\r\n                              {numbers.map((val, id) => (\r\n                                    <div className='number-bar' key={id} style={{ height: val, width: 1000 / this.state.numbers.length }}></div>\r\n                              ))}\r\n                        </div>\r\n\r\n\r\n\r\n                  </div>\r\n            );\r\n      }\r\n}\r\n\r\nfunction getRandomNumber(min, max) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport default Visualiser;","export function bubbleSortAnimate(numbers) {\r\n      const animations = [];\r\n      if (numbers.length <= 1) {\r\n            return numbers;\r\n      };\r\n      bubbleSort(numbers, animations);\r\n      return animations;\r\n}\r\n\r\n\r\n\r\nexport function selectionSortAnimate(numbers) {\r\n      const animations = [];\r\n      if (numbers.length <= 1) {\r\n            return numbers;\r\n      };\r\n      selectionSort(numbers, animations);\r\n      return animations;\r\n}\r\n\r\n\r\n\r\n\r\nfunction bubbleSort(array, animations) {\r\n      let change, temp;\r\n      do {\r\n            change = false;\r\n            for (let i = 0; i < array.length - 1; i++) {\r\n                  if (array[i + 1] < array[i]) {\r\n                        temp = array[i];\r\n                        array[i] = array[i + 1];\r\n                        array[i + 1] = temp;\r\n                        change = true;\r\n                        //Third element in array which is pushed to animation[] defines action which is going to be visualised\r\n\r\n                        animations.push([i, i + 1, 1]); // Color compared elements if 'i+1' is less than 'i'(red)\r\n                        animations.push([i, i + 1, 2, array[i + 1], array[i]]); // Swap compared elements if 'i+1' is less than 'i'\r\n                  } else {\r\n                        animations.push([i, i + 1, 3]); // Color compared elements if 'i+1' is bigger than 'i'(green)\r\n                  }\r\n                  animations.push([i, i + 1, null]); // Set default colors on compared elements\r\n            }\r\n            array.pop();\r\n      } while (change);\r\n      animations.push([0, 0, 4]); // End of visualisation\r\n}\r\n\r\n\r\n\r\n\r\nfunction selectionSort(array, animations) {\r\n      let min, minIndex, temp;\r\n      for (let i = 0; i < array.length - 1; i++) {\r\n            min = array[i];\r\n            minIndex = i;\r\n            for (let j = i; j < array.length; j++) {\r\n                  //Third element in array which is pushed to animation[] defines action which is going to be visualised\r\n                  animations.push([i, j, 0]) // Color elements which are compared with each other (red)\r\n\r\n                  if (array[j] < min) {\r\n                        animations.push([minIndex, j, 1]) // Color second compared value (green) and !!! set default color on previous min value !!! \r\n                        min = array[j];\r\n                        minIndex = j;\r\n                  } else {\r\n                        animations.push([i, j, 2]) // Set default color on second compared value\r\n                  }\r\n            }\r\n            temp = array[i];\r\n            array[i] = array[minIndex];\r\n            array[minIndex] = temp;\r\n            animations.push([i, minIndex, 3, array[minIndex], array[i]]); // Swap two elements and set default color\r\n      }\r\n      animations.push([0, 0, 4]); // End of sorting\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Visualiser from './Visualiser.js'\n\nclass App extends Component {\n  state = {\n\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <Visualiser />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}